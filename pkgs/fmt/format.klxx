//
// Copyright (c) 2020 James, https://github.com/zhuguangxiang
// All rights reserved.
//

import "fmt"
import "io"

class PrintList {
  fmt Formatter
  result Result<int, Error>
  has_fields bool

  func __init__(fmt Formatter) {
    self.fmt = fmt
    self.result = fmt.write_str("[")
  }

  func entry(fmt Formatter) PrintList {
    result = result.and_then(
      func() Result<int, Error> {
        if self.is_pretty() {
          if !self.has_fields {
            self.fmt.write_str("\n")
          }
          fmt.fmt(self.fmt)
          self.fmt.write_str(",\n")
        } else {
          if self.has_fields {
            self.fmt.write_str(", ")
          }
          fmt.fmt(self.fmt)
        }
      }
    )
    self.has_fields = true
  }

  func finish() Result<int, Error> {
    self.result.and_then(
      func() Result<int, Error> {
        self.fmt.write_str("]")
      }
    )
  }

  func entries(it Iterator<Formatter>) PrintList {
    for entry in entries {
      self.entry(entry)
    }
    return self
  }
}

class PrintMap {
  fmt Formatter
  result Result<int, Error>
  has_fields bool

  func __init__(fmt Formatter) {
    self.fmt = fmt
  }

  func entry(p Printable) PrintMap {

  }

  func finish() Result<int, Error> {

  }

  func entries(it Iterator<Printable>) PrintMap {

  }
}

class PrintTuple {
  fmt Formatter
  result Result<int, Error>
  has_fields bool

  func __init__(fmt Formatter) {
    self.fmt = fmt
  }

  func entry(p Printable) PrintTuple {

  }

  func finish() Result<int, Error> {

  }

  func entries(it Iterator<Printable>) PrintTuple {

  }
}

trait Formatter {
  func fmt(b Builder) Result<int, Error>
}

class Builder {
  buf str.Builder

  func __init__() {
    buf = new str.Builder()
  }

  func print_list() PrintList {
    return new PrintList(self)
  }

  func print_map() PrintMap {
    return new PrintMap(self)
  }

  func print_tuple() PrintTuple {
    return new PrintTuple(self)
  }

  func print_object() PrintObject {
    return new PrintObject(self)
  }

  func write_char(c char) Result<int, Error> {

  }

  func write_str(s string) Result<int, Error> {

  }

  func write_fmt(f string, args ...) Result<int, Error> {

  }
}
