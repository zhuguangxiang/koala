
pub class Pair<T, U> {
    var first T
    var second U

    pub xxx() {
        // stackmap
        var a T
        var b U

        if is_ref(T) {
            n = n + 1
        }
        if is_ref(U) {
            n = n + 1
        }

        gc_stack(n)
        gc_push(a, b)

        first.hash()
        first.equal()
        first.tostirng()
        first.class()

    }

    // object map
    // delay create object map to instance time, not compiled time
}

struct objectlayout {
    type->
    objectmap->(generic class)
    typeparam->(generic class)
    xxxx
};

void *create_object(type, generic type list)
{

}

pair := Pair<int, string>() //error, or auto change int to Integer?
pair := Pair<Integer, string>() // ok

arr := [int]

arr := [Pair<int, string>]

/*
1. code unfold
2. compiled into IR and saved into klc file
3. unfold it when it is used, and then check its types are valid or not
4. may be change/add/remove some instructions when it's unfold.
5. int/Integer can be auto box/unbox, no different.
6. if int used dot operator then int is auto boxed into Integer
7. Any does not represent it's a primitive or a reference value
8. pass type when new object? type is dynamic and canbe programable?
*/

/* only allowed object passed
array and map are intrinsic by compiler
*/

/* type inference */

func add<T>(a T, b T) T {
    a + b
}

add<int>(1, 2)

add(1,2)


func add<T : Add>(a T, b T) T {
    a + b
}

/*
operator overloading ?
*/

class String : Hash, Equal, Add {

}

/* single method interface and fat interface ? */

class Integer : Number, ToString {

}

/* the same method in two interfaces? */


trait B : A
trait C : B
trait D : B
trait E : D, C

class typeinfo {
    var meta typemeta;
    var vtbls [func (int) int]
}


// conclusion:
// 1. is_ref() method
// 2. stack map can be dynamic build.
// 3. object map is build delayed to runtime not compile time.
// 4. support operator overloading????
// 5. if int used dot operator then int is auto boxed into Integer
// Any is empty or not?
//
